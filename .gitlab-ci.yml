
# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

image: docker:latest
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay
  SPRING_PROFILES_ACTIVE: "gitlab-ci"

stages:
  - build
  - test
  - package
  - deploy


# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  tags:
    - hva
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Verify merge requests using JDK17
verify:jdk17:
  <<: *verify

test:
  stage: test
  tags:
    - prod
  script:
      - 'mvn $MAVEN_CLI_OPTS test'
      - pwd
      - mvn clean
      - mvn compile
      - mvn test
  except:
      variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  only:
    - main

#Build the project using JDK17
build:
  image: maven:3.8.3-openjdk-17-slim
  stage: build
  environment: production
  tags:
    - prod
  script:
    - cd /backend; mvn clean install -Dspring.profiles.active=dev && mvn package -B -e -Dspring.profiles.active=dev
  artifacts:
    paths:
      - target/*.jar
  only:
    - main

docker-build:
  stage: package
  script:
    - docker build --build-arg SPRING_ACTIVE_PROFILE=dev -t $DOCKER_REPO:latest .
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD docker.io
    - docker push $DOCKER_REPO:latest
  only:
     - master
deploy:
  image: ubuntu:latest
  stage: deploy
  tags:
    - prod
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - pwd
    - ssh root@$SERVER "docker login -u $DOCKER_USER -p $DOCKER_PASSWORD docker.io; docker stop $APP_NAME; docker system prune -a -f; docker pull $DOCKER_REPO:latest; docker-compose up -d; docker logout"
  only:
    - main